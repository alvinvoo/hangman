module Puzzle where

import Data.Char (isLetter)
import Data.List (intersperse) -- intersperse :: a -> [a] -> [a] -- putting `a` in between a series of a (list or string)

import System.Random (randomRIO) -- randomRIO :: Random a => (a, a) -> IO a

newtype WordList = WordList [String] deriving (Eq, Show)

allWords :: IO WordList
allWords = do
  dict <- readFile "data/dict.txt"
  return $ WordList (lines dict)
-- lines :: String -> [String] -- only split strings at newlines

minWordLength :: Int
minWordLength = 5

maxWordLength :: Int
maxWordLength = 9

maxWrongGuess :: Int
maxWrongGuess = 7

gameWords :: IO WordList
gameWords = do
  (WordList aw) <- allWords
  return $ WordList (filter gameFilter aw)
  where gameFilter aw = gameLength aw && gameLetter aw
          where gameLetter = all isLetter
                gameLength w =
                    let l = length (w :: String)
                    in l >= minWordLength
                    && l < maxWordLength
            

randomWord :: WordList -> IO String
randomWord (WordList wl) = do
  randomIndex <- randomRIO (0, length wl - 1)
  return $ wl !! randomIndex

randomWord' :: IO String
randomWord' = gameWords >>= randomWord -- >>= operator known as “bind”
-- bind allows us to sequentially compose actions such that a value generated by the first becomes an argument to the second

data Puzzle = Puzzle String [Maybe Char] [Char]
instance Show Puzzle where
  show (Puzzle _ discovered guessedWrong) =
    (intersperse ' ' $
    fmap renderPuzzleChar discovered)
    ++ "     Wrong guesses: " ++ guessedWrong 
    ++ "  Guesses left: " ++ show (maxWrongGuess - length guessedWrong)
instance Eq Puzzle where
  Puzzle a b c == Puzzle a' b' c' = a == a' && b == b' && c == c'

freshPuzzle :: String -> Puzzle
freshPuzzle str = Puzzle str initStr []
   where initStr = map (const Nothing) str

charInWord :: Puzzle -> Char -> Bool
charInWord (Puzzle str _ _) c = elem c str

alreadyGuessed :: Puzzle -> Char -> Bool
alreadyGuessed (Puzzle _ discovered wronglyGuessed) c = elem (Just c) discovered || elem c wronglyGuessed

renderPuzzleChar :: Maybe Char -> Char
renderPuzzleChar Nothing =  '_'
renderPuzzleChar (Just a) = a

fillInCharacter :: Puzzle -> Char -> Puzzle
fillInCharacter (Puzzle word filledInSoFar s) c = Puzzle word newFilledInSoFar wrongGuesses
  where zipper guessed wordChar guessChar =
          if wordChar == guessed
          then Just wordChar
          else guessChar
        newFilledInSoFar = zipWith (zipper c) word filledInSoFar
        wrongGuesses =  if elem c word then s else c : s
        -- word - puzzle's string
        -- filledInSoFar - [Maybe..] - puzzle display output
        -- zipper :: Char->Char->Maybe

handleGuess :: Puzzle -> Char -> IO Puzzle
handleGuess puzzle guess = do
  putStrLn $ "Your guess was: " ++ [guess]
  case (charInWord puzzle guess
        , alreadyGuessed puzzle guess) of
        (_, True) -> do
          putStrLn "You already guessed that\
          \ character, pick \
          \ something else!"
          return puzzle
        (True, _) -> do
          putStrLn "This character is in the\
          \ word, filling in the character\
          \ accordingly"
          return (fillInCharacter puzzle guess)
        (False, _) -> do
          putStrLn "This character isn't in\
          \ the word, try again."
          return (fillInCharacter puzzle guess)